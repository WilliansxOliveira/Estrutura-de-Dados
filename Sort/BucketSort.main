#include <stdio.h>
#include <stdlib.h>

#define MAX 10  // Número máximo de elementos e baldes

// Função de ordenação para baldes (Insertion Sort)
void insertionSort(float arr[], int n) {
    for (int i = 1; i < n; i++) {
        float key = arr[i];
        int j = i - 1;
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j--;
        }
        arr[j + 1] = key;
    }
}

// Função principal do Bucket Sort
void bucketSort(float arr[], int n) {
    // Criação de baldes
    float buckets[MAX][MAX];
    int bucketCount[MAX] = {0};

    // Distribuindo os elementos nos baldes
    for (int i = 0; i < n; i++) {
        int bucketIndex = (int)(arr[i] * MAX); // Índice do balde
        buckets[bucketIndex][bucketCount[bucketIndex]++] = arr[i];
    }

    // Ordenando elementos em cada balde
    for (int i = 0; i < MAX; i++) {
        if (bucketCount[i] > 0) {
            insertionSort(buckets[i], bucketCount[i]);
        }
    }

    // Concatenando os baldes na lista final
    int index = 0;
    for (int i = 0; i < MAX; i++) {
        for (int j = 0; j < bucketCount[i]; j++) {
            arr[index++] = buckets[i][j];
        }
    }
}

// Função para imprimir o array
void printArray(float arr[], int n) {
    for (int i = 0; i < n; i++) {
        printf("%.2f ", arr[i]);
    }
    printf("\n");
}

// Exemplo de uso
int main() {
    float arr[] = {0.78, 0.17, 0.39, 0.26, 0.72, 0.94, 0.21, 0.12, 0.23, 0.68};
    int n = sizeof(arr) / sizeof(arr[0]);

    printf("Array original:\n");
    printArray(arr, n);

    bucketSort(arr, n);

    printf("\nArray ordenado:\n");
    printArray(arr, n);

    return 0;
}
