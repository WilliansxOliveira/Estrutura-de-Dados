
#include <stdio.h>

// Função para realizar Ternary Search em uma lista ordenada
int ternarySearch(int arr[], int left, int right, int key) {
    if (right >= left) {
        // Divida o intervalo em três partes
        int mid1 = left + (right - left) / 3;
        int mid2 = right - (right - left) / 3;

        // Verifique se a chave está em uma das divisões
        if (arr[mid1] == key)
            return mid1;
        if (arr[mid2] == key)
            return mid2;

        // Procure na parte correspondente
        if (key < arr[mid1])
            return ternarySearch(arr, left, mid1 - 1, key);
        else if (key > arr[mid2])
            return ternarySearch(arr, mid2 + 1, right, key);
        else
            return ternarySearch(arr, mid1 + 1, mid2 - 1, key);
    }
    return -1; // Elemento não encontrado
}

// Função para realizar Binary Search em uma lista ordenada
int binarySearch(int arr[], int left, int right, int key) {
    while (left <= right) {
        int mid = left + (right - left) / 2;

        if (arr[mid] == key)
            return mid;
        if (arr[mid] < key)
            left = mid + 1;
        else
            right = mid - 1;
    }
    return -1; // Elemento não encontrado
}

int main() {
    int arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int n = sizeof(arr) / sizeof(arr[0]);
    int key = 7;

    int resultTernary = ternarySearch(arr, 0, n - 1, key);
    int resultBinary = binarySearch(arr, 0, n - 1, key);

    // Exibindo o resultado do Ternary Search
    printf("Resultado do Ternary Search: ");
    if (resultTernary != -1)
        printf("Elemento encontrado na posição %d\n", resultTernary);
    else
        printf("Elemento não encontrado\n");

    // Exibindo o resultado do Binary Search
    printf("Resultado do Binary Search: ");
    if (resultBinary != -1)
        printf("Elemento encontrado na posição %d\n", resultBinary);
    else
        printf("Elemento não encontrado\n");

    return 0;
}